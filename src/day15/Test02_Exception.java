package day15;

/*
	예외처리
	==> 프로그램적으로는 문제가 없으나
		(문법상 전혀 에러가 나지 않으나...)
		데이터의 문제나 장비의 문제 등에 의해서
		프로그램을 실행하는 도중 발생하는 에러를 "실행에러(Run Time Error)" 라고 표현한다.
		이것을 자바측에서는 "예외(Exception)" 이라고 부른다.
		
		문제는
		이런 예외는 개발자가 예측해서 
		이런 문제가 발생했을 경우 대처하는 방식으로 프로그램을 제작해야 하고
		이처럼 예외가 발생했을 경우 대처하는 방식의 프로그램을
		"예외처리"라고 부른다.
		
		
		자바에서는 이런 문제점(예외 발생 원인을 개발자가 알고 있어야 한다.)
		을 해결하기 위해서 예외처리 문법이 존재한다.
		
		형식 ]
			
			(1)
			try {
				(2)
				------------------- 예외 발생 가능 위치
				(3)
			} catch(????? 1) {
				(4)	
				?????1 예외 발생 시 문제점 해결 하는 부분
			} catch(???? 2) {
				????2 예외 발생 시 문제점 해결하는 부분
			} finally {
				(5)
			}
			
			(6)	
			
			예외 발생하지 않는 경우
				1 ---> 2 ---> 3 ---> 5 ---> 6
			
			예외 1 발생하는 경우
			
				1 ---> 2 ---> 4 ---> 5 ---> 6
			
			예외 2 발생하는 경우
			
				1 ---> 2 ---> 4-1 ---> 5 ---> 6

		참고 ]
			3) 번의 경우는 예외가 바생하지 않은 경우에만 실행된다.
			예외가 발생하면 실행되지 않는다.
			==> 따라서 try{} 의 범위에 따라서 
				실행이 될수도 있고 안될수도 있다.
				
			그러므로 
			반드시 실행되어야 하는 명령은
			3) 위치에 기술하면 안된다.
			
			이런 경우를 위해서
			예외의 발생 여부와 관계없이 반드시 실행되어야 하는 명령은
			5) 에 기술해야 한다.
			
	자바의 예외처리 원리
		예외가 발생하면 JVM 은 발생한 예외의 종류를 분석한후
		예외에 대한 정보를 자바답게 클래스로 만들어서
		catch 부분에 그 클래스의 주소를 전달한다.
		
		
	catch 의 의미
		==> 예외가 발생하면 그 예외에 대한 정보를 받아서
			개발자가 그 정보를 이용해서 원하는 처리를 해줘야 한다.
			
	다중 catch
		==> try{} 안에 예외 발생 요소가 여러가지 복합적인 예외 발생 요소를 가질 수 있다.
		
			이 때 반드시 어떤 에러 때문인지를 구분해서 처리해야 한다면???
			이런 경우를 대비해서 만들어 놓은 방법이 다중 catch 이다.
			
			이 때 catch(????) 에 정의하는 예외의 순서는 
			좁은 것부터 기술하는 것이 원칙이다.
	
	finally {}
		==> 예외 발생 여부와 상관없이 반드시 실행되어야 하는 명령들이 존재할경우
			이런 문장들을 입력하는 블럭
	참고 ]
		catch{} 도 필요한 경우 생략할 수 있다.
	
	
	
 */
import java.util.*;
public class Test02_Exception {
	Scanner sc; // 전역변수 선언
	public Test02_Exception() {
	
		sc = new Scanner(System.in); // 전역변수 초기화
		int no = 0; // 지역변수 선언 및 초기화
		try {
			// 이 안에서 변수를 만들게 되면
			// try 블럭 내에서만 사용할 수 있는 지역변수가 된다.
			System.out.print("정수입력 : ");
			no = sc.nextInt(); // 예외가 발생할 가능성이 있는 명령
			System.out.println("1. no : " + no);
		} catch(Exception e) {
			// 여기서 변수 e는 catch 블럭에서만 사용하는 지역변수
			System.out.println("2. 프로그램 이상으로 프로그램을 종료합니다.");
		} finally {
			try{
				sc.close();
			} catch(Exception e) {}
		
			System.out.println("3. 예외처리가 종료됩니다.");
		}
	}

	public static void main(String[] args) {
		new Test02_Exception();
	}

}
