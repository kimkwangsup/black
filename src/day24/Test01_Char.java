package day24;

import java.io.*;
public class Test01_Char {
/*
	Char 단위 스트림
	==> 한번에 입출력 할 때 2바이트 단위로 입출력 할 수 있는 스트림
		
		주의 ]
			기계어 상태의 내용은 절대로 문자단위로 입출력을 하면 안된다.
			이 스트림은 반드시 텍스트 문서에 한해서만 사용해야 한다.
			
			기계어 문서는 반드시 byte 단위 스트림을 이용해서 입출력 해야한다.
			
				예 ]
					가		ㄱ : 0011	ㅏ: 0101
					라고 가정하면
					00110101 처럼 만들어질 것으로 예상하겠지만
					실제는 01010011 로 뒤집혀서 문자가 만들어진다.
					
		1. FileWrite / FileReader
			==> 파일에 직접 연결된 타겟(기본)스트림이다.
				단위는 Char 단위이다.
				
			내부적으로 Char 단위로(2 byte) 처리 된다는 것만 달라질 뿐
			byte 단위 스트림과 사용법이 다를것이 없다.
			
		2. 관련된 필터(보조)스트림
			
			1) BufferedReader / BufferedWriter
				==> 중간에 버퍼 기능을 추가해서 스트림의 성능을 향상시키는 보조스트림이다.
				
				핵심함수 ]
					char 단위의 기본 함수에는 문자열을 읽을 수 있는 함수가 없다.
					
					readLine() ==> 한 줄 단위로 문자열을 그대로 읽어서 사용할 수 있는 함수
					
					참고 ]
						사용상 주의사항 ]
							이 함수는 줄 단위로 한 줄씩 읽는 함수이다.
							(\r\n(줄 바꿈 기호)를 발견하면 그 곳에서 읽는 것을 멈춘다는 것을 의미한다.)
							
							따라서 필요하면 줄 단위를 강제로 입력해줘야 한다.
							참고로 이 함수는 줄 바꿈 기호를 읽지 않는다. 
							줄 바꿈 기호를 삭제한다라는 의미
							
			2) PrintWriter
				==> byte 단위의 PrintStream 처럼
					필터 계열의 스트림이다.
						1. 버퍼의 기능을 가지고 있다.
						2. 직접 파일에 연결할 수 있다.(내부적으로 기본 스트림을 만들어서 연결해 놓는다.)
						3. 사용자의 편의를 제공한다.
							==> 자바의 데이터형을 그대로 출력할 수 있다.
						4. byte[] 단위의 스트림과도 연결할 수 있다.
					
					
						참고 ]
							스트림 사용상 주의사항
								1. 반드시 같은 방향끼리만 연결할 수 있다.
								2. 반드시 같은 크기로만 연결할 수 있다.
								
							예 ]
								FileInputStream fin = new FileInputStream("주소");
								BufferedReader br = new BufferedReader(fin);
								==> 처리하는 단위가 다르기 때문에 이렇게 사용할 수 없다.

			참고 스트림 ]
				InputStreamReader / OutputStreamWriter
				==> 크기가 다른 두개의 스트림을 연결할 때 사용하는 보조스트림이다.
				
				예 ]
					FileInputStream fin = new FileInputStream("????");
					InputStreamReader tmp = new InputStreamReader(fin);
					BufferedReader br = new BufferedReader(tmp);
				
				참고 ]
					기본(타겟)스트림이 문자단위이고 보조스트림이 바이트 단위인 경우에는 연결할 수 없다.
					*****
					반드시 기본스트림이 byte 단위이고 보조스트림이 char 단위인 경우에 한해서만 연결할 수 있다.
				
----------------------------------------------------------------------------------------------------------------------------

	객체의 직렬화
	==> 데이터는 자바의 기본형 이외에도 클래스 전체를 데이터로 외부 장치와 입출력 할 수 있다.
		==> 이 때, 함수는 제외되고
			그 클래스 내의 변수의 내용만 입출력된다.
			
			이처럼 클래스가 다른 장치에 전달되는 상태를 가리켜
				"직렬화" 
			라고 부른다.
			
			<== 클래스에 있는 변수의 내용이 순서대로 입출력이 되기 때문에...
			
			그런데 
			아무 클래스나 입출력 되는 것은 아니고
			그 클래스가 반드시 직렬화 가능한 클래스여야 한다.
			직렬화 가능한 클래스는 "Serializable" 인터페이스를 상속받아서 만들어진 클래스이다.
			
			직렬화는 변수의 내용만 입출력되므로 
			네트워크처럼 서로 떨어진 경우에는
			양쪽에 독같은 클래스가 존재해야 된다.
			(왜냐하면 클래스 구조는 전달되지 않고 변수의 내용만 전달되기 때문에
				양쪽 모두 클래스의 구조를 가지고 있어야 한다.)
			*****
 			이때 양쪽에 있는 클래스는
 				클래스이름 + 패키지이름
 			이 모두 동일해야 한다.
 		
 		이때 사용하는 보조스트림
 			
 			ObjectInputStream / ObjectOutputStream
 			==> 주로 네트워크에서 많이 사용하므로 
 				Reader/Writer 계열은 없다.
 				
------------------------------------------------------------------------------------------------------------------ 				
	IO 쪽에서 갖춰야할 능력
		1. 필요할 때 데이터를 파일에 저장할 수 있어야 한다.
		2. 파일에 저장된 내용을 불러오기 할 수 있어야 한다.
		
-------------------------------------------------------------------------------------------------------------------
	이후 공부할 내용
		데이터베이스에 연결하고 
		질의명령 보내고
		결과 받아서 처리하고
		
		==> JSP / Spring 과 연결된 내용이므로
			반드시 복습을 해야하고...
 */
	public Test01_Char() {
		// 문자단위로 파일에 데이터를 저장하는 프로그램을 작성해보자.
		
		// 할일
		
		// 기본스트림 준비
		FileWriter fw = null;
		try {
			// 기본스트림 만들고
			fw = new FileWriter("src/day24/test.txt");
			// 데이터 쓰고
			
			/*
			// 1. 한 글자 써보기
			char ch = '한';
			fw.write(ch);
			*/
			
			// 2. 여러 글자를 저장해보자
			String str = "창문너머 어렴풋이 옛 생각이 나겠지요.";
			/*
			// 문자 배열로 변환
			char[] buff = str.toCharArray();
			// 문자  배열을 전송한다.
			fw.write(buff);
			*/
			/*
				참고 ]
					문자단위 스트림은 텍스트 데이터만 처리하도록 되어있기 때문에
					기본함수 + 문자 처리 기능이 추가되어있다.
			 */
			// 문자배열로 변환하지 않고 전송하기
			fw.write(str);
			System.out.println("###저장완료###");
		}catch(Exception e) {
			e.printStackTrace();
		}finally {
			try {
				fw.close();
			}catch(Exception e) {}
		}
		
		
		//
		
	}

	public static void main(String[] args) {
		new Test01_Char();
	}

}
