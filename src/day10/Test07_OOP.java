package day10;

/*
	객체 지향 언어(Object Oriented Programming)
	==> 클래스를 이용해서 프로그램을 만들어 나가는 언어
	
	클래스란?
		==> 하나의 목적을 달성하기 위해서 필요한 기능을 모아놓은 
			프로그램의 기본 단위
			
			예 ]
				문자열을 관리하고싶다
				==> String
				
				네트워크를 처리하고싶다.
				==> Socket
				
				많은 양의 데이터를 보관하고 관리하고 싶다.
				==> ArrayList, HashMap, TreeMap...
				
			클래스의 구성요소는 
			1. 필요한 데이터를 보관할 수 있어야 한다.		 ===> 변수
			2. 어떤 문제를 해결하기 위한 기능이 있어야 한다. ===> 함수
			
			클래스 만드는 방법 ]
				
				[접근지정자] [속성] class 클래스이름 {
					변수...
					함수(){}
				}
	
	*****			
	그런데 클래스는 설계도에 불과하다.
	즉, 클래스만 가지고 있다고 이것이 실행되는 것은 절대 아니다.
	반드시 클래스가 실행 가능한 것으로 탄생되어야 한다.
	(new 명령을 이용해서 Heap 영역에 올려놓는 작업...)
	
	이렇게 클래스를 실행 가능한 것으로 만든 것을 "Object" 라고 부른다.
	
	결론적으로
	객체지향언어는
	클래스를 기반으로 만들어진 Object 에 의해서 만들어지는 프로그램
	
	***
	객체 만드는 방법
	==> 객체는 JVM(자바가상머신)이 만들어준다.
		다만 개발자는 필요한 부품을 만들어 달라고 명령만 내리면 된다.
		
		명령 ]
			클래스이름 변수이름; // 변수 선언
			변수이름 = new 클래스이름(); // new 명령과 함께 생성자 호출
			
-------------------------------------------------------------------------------------------

	객체 사용 방법
		==> 객체를 사용한다는 것은
			특정 목적을 달성하기 위해서 필요한 데이터를 기억하던지
			아니면 그 목적을 달성하기 위해서 필요한 기능을 수행하던지...
			가 될 것이다.
			
			형식 ]
				주소.변수; // 데이터를 사용
				
				주소.함수(); // 기능 수행(함수 호출)
				
				예 ]
					public class Test{
						int no;
						
						public void abc(){}
						
					}
					Test t = new Test();
					t.no = 10;
					t.abc();
					
				참고 ]
					자바에서는 소속을 밝혀줄 때 "."을 이용한다.
					
	참고 ]
		클래스 하나당 오브젝트(객체)는 복수개 만들어도 상관 없다.
		즉, 설계도 한 장만 있으면 집을 여러채 지어도 상관없다.
		이때 주소를 이용해서 사용하게 되므로 
		각각의 오브젝트는 별개로 독립되어서 실행될 수 있다.

				
			
 */
public class Test07_OOP {
	public Test07_OOP() {
		System.out.println("이 클래스 시작...!");
	}
	public static void main(String[] args) {
		new Test07_OOP();
	}
	
	public void abc() {
//		Test07_OOP();
		// 생성자는 일반 함수처럼 독립적으로 호출할 수 없다.
	}

}
